import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from sqlalchemy.orm import Session
from sqlalchemy import select
from datetime import datetime

from db import get_db, Base, engine
from models import TelegramUsers, TodoLists
from config import configs
from tasks import send_reminders  # –ò–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á–∏ Celery

logging.basicConfig(level=logging.INFO)

bot = Bot(token=configs.BOT_TOKEN)
dp = Dispatcher()

Base.metadata.create_all(bind=engine)

class TaskState(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_deadline = State()

def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="tasks"),
         InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="complete_task")],
        [InlineKeyboardButton(text="üìú –í—Å–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="all_commands")]
    ])

@dp.message(Command("start"))
async def start_command(message: Message):
    with next(get_db()) as db:
        user = db.execute(select(TelegramUsers).filter(TelegramUsers.telegram_id == message.from_user.id)).scalars().first()
        if not user:
            new_user = TelegramUsers(telegram_id=message.from_user.id, telegram_username=message.from_user.username)
            db.add(new_user)
            db.commit()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏.", reply_markup=main_menu())

@dp.callback_query(F.data == "all_commands")
async def all_commands(callback: CallbackQuery):
    await callback.message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\nüìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é")

@dp.callback_query(F.data == "tasks")
async def show_tasks(callback: CallbackQuery):
    with next(get_db()) as db:
        user = db.execute(select(TelegramUsers).filter(TelegramUsers.telegram_id == callback.from_user.id)).scalars().first()
        if not user:
            await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start.")
            return
        tasks = db.execute(select(TodoLists).filter(TodoLists.user_id == user.id, TodoLists.is_done == False)).scalars().all()
        tasks_text = "\n".join([f"- {task.todo_name}" for task in tasks]) if tasks else "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á."
    await callback.message.answer(f"üìã –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n{tasks_text}")

@dp.callback_query(F.data == "add_task")
async def add_task(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskState.waiting_for_name)

@dp.message(TaskState.waiting_for_name)
async def process_task_name(message: Message, state: FSMContext):
    await state.update_data(task_name=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(TaskState.waiting_for_description)

@dp.message(TaskState.waiting_for_description)
async def process_task_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text if message.text != '-' else None)
    await message.answer("üìÖ –í–≤–µ–¥–∏ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(TaskState.waiting_for_deadline)

@dp.message(TaskState.waiting_for_deadline)
async def process_task_deadline(message: Message, state: FSMContext):
    deadline = None
    if message.text != '-':
        try:
            deadline = datetime.strptime(message.text, "%Y-%m-%d").date()
        except ValueError:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
            return

    with next(get_db()) as db:
        user = db.execute(select(TelegramUsers).filter(TelegramUsers.telegram_id == message.from_user.id)).scalars().first()
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start.")
            return

        data = await state.get_data()
        new_task = TodoLists(
            user_id=user.id,
            todo_name=data['task_name'],
            description=data['description'],
            deadline=deadline,
            is_done=False
        )
        db.add(new_task)
        db.commit()

    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ '{data['task_name']}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()
@dp.callback_query(F.data == "complete_task")
async def complete_task(callback: CallbackQuery):
    with next(get_db()) as db:
        user = db.execute(select(TelegramUsers).filter(TelegramUsers.telegram_id == callback.from_user.id)).scalars().first()
        if not user:
            await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start.")
            return

        tasks = db.execute(select(TodoLists).filter(TodoLists.user_id == user.id, TodoLists.is_done == False)).scalars().all()
        if not tasks:
            await callback.message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            return

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –∑–∞–¥–∞—á–∏
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=task.todo_name, callback_data=f"complete_{task.id}")]
                for task in tasks
            ]
        )
        await callback.message.answer("–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("complete_"))
async def confirm_complete_task(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    with next(get_db()) as db:
        task = db.execute(select(TodoLists).filter(TodoLists.id == task_id)).scalars().first()
        if task:
            task.is_done = True
            db.commit()
            await callback.message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task.todo_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Celery –∑–∞–¥–∞—á—É —Ä–∞–∑ –≤ —á–∞—Å
    asyncio.create_task(start_celery_reminders())

    await dp.start_polling(bot)

async def start_celery_reminders():
    while True:
        send_reminders.delay()
        await asyncio.sleep(3600)
if __name__ == "__main__":
    asyncio.run(main())

